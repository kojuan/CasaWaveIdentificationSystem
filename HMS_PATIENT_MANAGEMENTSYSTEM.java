package healthMonitoringSystem;

import com.mysql.jdbc.PreparedStatement;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author khian
 */
public class HMS_PATIENT_MANAGEMENTSYSTEM extends javax.swing.JFrame {

    HMS_DATABASECONNECTION dbConnect = new HMS_DATABASECONNECTION();
    //get Strings of 'em all
    String patientIdString = "";
    String firstName = "";
    String middleName = "";
    String lastName = "";
    String genderSelect = "";
    String dateOfBirth = "";
    String bloodType = "";
    String civilStatus = "";
    String religion = "";
    String nationality = "";
    String cellphoneNumber = "";
    String image_path = null;
    Connection connx;
    static DefaultTableModel model;
    int currentPosition = 0;
    HMS_DATAACESSOBJECT_IMPLEMENTATION dao = new HMS_DATAACESSOBJECT_IMPLEMENTATION();

    public String box1, box2;

    /**
     * Creates new form HMS_PATIENT_MANAGEMENTSYSTEM
     *
     * @throws java.lang.Exception
     */
    public HMS_PATIENT_MANAGEMENTSYSTEM() throws Exception {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("HMS_LOGO_800PX.png")));
        initComponents();
        connx = dbConnect.databaseConnection();
        // Populating patientDataTable
        dao.populatepatientDataTableFromMySQLDatabase(model, patientDataTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGroup = new javax.swing.ButtonGroup();
        patientFullMainPanel = new javax.swing.JPanel();
        patientIDLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        middleNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        dateOfBirthLabel = new javax.swing.JLabel();
        bloodTypeLabel = new javax.swing.JLabel();
        cellphoneNumberLabel = new javax.swing.JLabel();
        civilStatusLabel = new javax.swing.JLabel();
        religionLabel = new javax.swing.JLabel();
        nationalityLabel = new javax.swing.JLabel();
        imagePathLabel = new javax.swing.JLabel();
        patientIdTf = new javax.swing.JTextField();
        firstNameTf = new javax.swing.JTextField();
        middleNameTf = new javax.swing.JTextField();
        lastNameTf = new javax.swing.JTextField();
        dateOfBirthPicker = new com.github.lgooddatepicker.components.DatePicker();
        maleCbButton = new javax.swing.JCheckBox();
        femaleCbButton = new javax.swing.JCheckBox();
        bloodTypeCB = new javax.swing.JComboBox<>();
        civilStatusCB = new javax.swing.JComboBox<>();
        religionCB = new javax.swing.JComboBox<>();
        nationalityTf = new javax.swing.JTextField();
        phoneNumberTf = new javax.swing.JTextField();
        imagePathTf = new javax.swing.JTextField();
        labelImage = new javax.swing.JLabel();
        browseImageButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        moveRowUpButton = new javax.swing.JButton();
        moveRowDownButton = new javax.swing.JButton();
        exportExcelButton = new javax.swing.JButton();
        importExcelButton = new javax.swing.JButton();
        printButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientDataTable = new javax.swing.JTable();
        imageNameLabel = new javax.swing.JLabel();
        imageNameTf = new javax.swing.JTextField();
        firstItemInListButton = new javax.swing.JButton();
        lastItemInListButton = new javax.swing.JButton();
        nextItemInListButton = new javax.swing.JButton();
        previousItemInListButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        filterSearchTf = new javax.swing.JTextField();
        closeButton = new javax.swing.JButton();
        temperatureTf1 = new javax.swing.JTextField();
        temperatureTf2 = new javax.swing.JTextField();
        temperatureBox1 = new javax.swing.JComboBox<>();
        patientIDLabel1 = new javax.swing.JLabel();
        temperatureBox2 = new javax.swing.JComboBox<>();
        temperatureConvertButton1 = new javax.swing.JButton();
        temperatureClearAllButton = new javax.swing.JButton();
        temperatureStatus = new javax.swing.JLabel();
        patientIDLabel2 = new javax.swing.JLabel();
        bpmTf = new javax.swing.JTextField();
        detectBPMButton = new javax.swing.JButton();
        temperatureClearAllButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MHMS Patient Data Management System");
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1920, 1080));
        setName("patientMainFrame"); // NOI18N
        setUndecorated(true);
        setResizable(false);

        patientFullMainPanel.setBackground(new java.awt.Color(235, 241, 253));
        patientFullMainPanel.setMaximumSize(new java.awt.Dimension(1920, 1080));
        patientFullMainPanel.setPreferredSize(new java.awt.Dimension(1920, 1080));

        patientIDLabel.setText("Patient ID:");
        patientIDLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        firstNameLabel.setText("First Name:");
        firstNameLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        middleNameLabel.setText("Middle Name:");
        middleNameLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        lastNameLabel.setText("Last Name:");
        lastNameLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        genderLabel.setText("Sex:");
        genderLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        dateOfBirthLabel.setText("Date of Birth:");
        dateOfBirthLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        bloodTypeLabel.setText("Blood Type:");
        bloodTypeLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        cellphoneNumberLabel.setText("Cellphone Num. :");
        cellphoneNumberLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        civilStatusLabel.setText("Civil Status:");
        civilStatusLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        religionLabel.setText("Religion:");
        religionLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        nationalityLabel.setText("Nationality:");
        nationalityLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        imagePathLabel.setText("Image Path:");
        imagePathLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        patientIdTf.setEnabled(false);

        firstNameTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                firstNameTfKeyTyped(evt);
            }
        });

        middleNameTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                middleNameTfKeyTyped(evt);
            }
        });

        lastNameTf.setMaximumSize(new java.awt.Dimension(7, 20));
        lastNameTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lastNameTfKeyTyped(evt);
            }
        });

        dateOfBirthPicker.setBackground(new java.awt.Color(255, 255, 255));
        dateOfBirthPicker.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        genderGroup.add(maleCbButton);
        maleCbButton.setText("Male");
        maleCbButton.setBackground(new java.awt.Color(235, 241, 253));
        maleCbButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        genderGroup.add(femaleCbButton);
        femaleCbButton.setText("Female");
        femaleCbButton.setBackground(new java.awt.Color(235, 241, 253));
        femaleCbButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        bloodTypeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unspecified", "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-" }));
        bloodTypeCB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        civilStatusCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unspecified", "Single", "Married", "Divorced", "Separated", "Widowed" }));
        civilStatusCB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        religionCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unspecified", "Aglipayan", "Baháʼí Faith", "Buddhism", "Catholic", "Caodaism", "Cheondoism", "Falun Gong", "Hinduism", "Hoahaoism", "Iglesia ni Cristo", "Islam", "Jainism", "Judaism", "Korean Shamanism", "Non-Roman Catholic and Protestant", "Seventh-day Adventist", "Shinto", "Sikhism", "Taoism", "Tenriism", " ", " " }));
        religionCB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        nationalityTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nationalityTfKeyTyped(evt);
            }
        });

        phoneNumberTf.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        phoneNumberTf.setMaximumSize(new java.awt.Dimension(7, 20));
        phoneNumberTf.setPreferredSize(new java.awt.Dimension(7, 20));
        phoneNumberTf.setToolTipText("Please indicate your Phone number starting at 09xxxxxxxx");
        phoneNumberTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneNumberTfKeyTyped(evt);
            }
        });
        phoneNumberTf.setDocument(new JTextFieldLimit(11));

        imagePathTf.setEditable(false);
        imagePathTf.setBorder(null);
        imagePathTf.setEnabled(false);
        imagePathTf.setFocusable(false);

        labelImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelImage.setBackground(new java.awt.Color(102, 102, 102));
        labelImage.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelImage.setForeground(new java.awt.Color(255, 255, 255));
        labelImage.setOpaque(true);

        browseImageButton.setText("Browse Image");
        browseImageButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        browseImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseImageButtonActionPerformed(evt);
            }
        });

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/addIcon.png"))); // NOI18N
        addButton.setText("Add");
        addButton.setBackground(new java.awt.Color(235, 245, 255));
        addButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        addButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        addButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/refreshIcon.png"))); // NOI18N
        updateButton.setText("Update");
        updateButton.setBackground(new java.awt.Color(235, 245, 255));
        updateButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        updateButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        updateButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/deleteIcon.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setBackground(new java.awt.Color(235, 245, 255));
        deleteButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        deleteButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        deleteButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/clearIcon.png"))); // NOI18N
        clearButton.setText("Clear");
        clearButton.setBackground(new java.awt.Color(235, 245, 255));
        clearButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        clearButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        clearButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        moveRowUpButton.setText("Move Row Up");
        moveRowUpButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        moveRowUpButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        moveRowUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRowUpButtonActionPerformed(evt);
            }
        });

        moveRowDownButton.setText("Move Row Down");
        moveRowDownButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        moveRowDownButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        moveRowDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRowDownButtonActionPerformed(evt);
            }
        });

        exportExcelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/excel.png"))); // NOI18N
        exportExcelButton.setText("Export (Excel)");
        exportExcelButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        exportExcelButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        exportExcelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportExcelButtonActionPerformed(evt);
            }
        });

        importExcelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/excel.png"))); // NOI18N
        importExcelButton.setText("Import (Excel)");
        importExcelButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        importExcelButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        importExcelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importExcelButtonActionPerformed(evt);
            }
        });

        printButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/printerIcon.png"))); // NOI18N
        printButton.setText("Print Entire Patient Database");
        printButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        printButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        patientDataTable.setFillsViewportHeight(true);
        patientDataTable.setBackground(new Color(235, 240, 255));
        patientDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Middle Name", "Last Name", "Gender", "Birthday", "Blood Type", "Civil Status", "Religion", "Nationality", "Cellphone Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientDataTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        patientDataTable.setGridColor(new java.awt.Color(235, 241, 253));
        patientDataTable.setMaximumSize(new java.awt.Dimension(800, 0));
        patientDataTable.setMinimumSize(new java.awt.Dimension(800, 0));
        patientDataTable.setRowHeight(20);
        patientDataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientDataTableMouseClicked(evt);
            }
        });
        patientDataTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patientDataTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(patientDataTable);
        if (patientDataTable.getColumnModel().getColumnCount() > 0) {
            patientDataTable.getColumnModel().getColumn(0).setMaxWidth(50);
            patientDataTable.getColumnModel().getColumn(6).setMaxWidth(100);
        }

        imageNameLabel.setText("Image Name:");
        imageNameLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        imageNameTf.setEditable(false);
        imageNameTf.setBorder(null);
        imageNameTf.setEnabled(false);
        imageNameTf.setFocusable(false);

        firstItemInListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/first.png"))); // NOI18N
        firstItemInListButton.setText("First");
        firstItemInListButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        firstItemInListButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        firstItemInListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstItemInListButtonActionPerformed(evt);
            }
        });

        lastItemInListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/last.png"))); // NOI18N
        lastItemInListButton.setText("Last");
        lastItemInListButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lastItemInListButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        lastItemInListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastItemInListButtonActionPerformed(evt);
            }
        });

        nextItemInListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/next.png"))); // NOI18N
        nextItemInListButton.setText("Next");
        nextItemInListButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        nextItemInListButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        nextItemInListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextItemInListButtonActionPerformed(evt);
            }
        });

        previousItemInListButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/previous.png"))); // NOI18N
        previousItemInListButton.setText("Previous");
        previousItemInListButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        previousItemInListButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        previousItemInListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousItemInListButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Filter Search:");
        jLabel1.setBackground(new java.awt.Color(235, 241, 253));
        jLabel1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N

        filterSearchTf.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        filterSearchTf.setBackground(new java.awt.Color(204, 204, 255));
        filterSearchTf.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        filterSearchTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterSearchTfKeyReleased(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.setBackground(new java.awt.Color(255, 0, 102));
        closeButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        closeButton.setBorderPainted(false);
        closeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeButton.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        closeButton.setForeground(new java.awt.Color(204, 255, 255));
        closeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        closeButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        closeButton.setToolTipText("Exit the application");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        temperatureTf1.setEditable(false);
        temperatureTf1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        temperatureTf1.setMaximumSize(new java.awt.Dimension(7, 20));
        temperatureTf1.setPreferredSize(new java.awt.Dimension(7, 20));
        temperatureTf1.setToolTipText("Please indicate your Phone number starting at 09xxxxxxxx");
        temperatureTf1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                temperatureTf1KeyTyped(evt);
            }
        });
        phoneNumberTf.setDocument(new JTextFieldLimit(11));

        temperatureTf2.setEditable(false);
        temperatureTf2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        temperatureTf2.setMaximumSize(new java.awt.Dimension(7, 20));
        temperatureTf2.setPreferredSize(new java.awt.Dimension(7, 20));
        temperatureTf2.setToolTipText("Please indicate your Phone number starting at 09xxxxxxxx");
        temperatureTf2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                temperatureTf2KeyTyped(evt);
            }
        });
        phoneNumberTf.setDocument(new JTextFieldLimit(11));

        temperatureBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celsius", "Fahrenheit" }));
        temperatureBox1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        patientIDLabel1.setText("Temperature:");
        patientIDLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        temperatureBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celsius", "Fahrenheit" }));
        temperatureBox2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        temperatureConvertButton1.setText("Detect");
        temperatureConvertButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temperatureConvertButton1ActionPerformed(evt);
            }
        });

        temperatureClearAllButton.setText("Clear All Temperature Input/Output");
        temperatureClearAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temperatureClearAllButtonActionPerformed(evt);
            }
        });

        patientIDLabel2.setText("BPM (beats per minute):");
        patientIDLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        bpmTf.setEditable(false);
        bpmTf.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bpmTf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bpmTf.setMaximumSize(new java.awt.Dimension(7, 20));
        bpmTf.setPreferredSize(new java.awt.Dimension(7, 20));
        bpmTf.setToolTipText("Please indicate your Phone number starting at 09xxxxxxxx");
        phoneNumberTf.setDocument(new JTextFieldLimit(11));

        detectBPMButton.setText("Detect");
        detectBPMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectBPMButtonActionPerformed(evt);
            }
        });

        temperatureClearAllButton1.setText("Clear BPM");
        temperatureClearAllButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temperatureClearAllButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout patientFullMainPanelLayout = new javax.swing.GroupLayout(patientFullMainPanel);
        patientFullMainPanel.setLayout(patientFullMainPanelLayout);
        patientFullMainPanelLayout.setHorizontalGroup(
            patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                                .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstNameLabel)
                                    .addComponent(patientIDLabel)
                                    .addComponent(middleNameLabel)
                                    .addComponent(dateOfBirthLabel)
                                    .addComponent(bloodTypeLabel)
                                    .addComponent(civilStatusLabel)
                                    .addComponent(religionLabel)
                                    .addComponent(nationalityLabel)
                                    .addComponent(cellphoneNumberLabel)
                                    .addComponent(lastNameLabel))
                                .addGap(19, 19, 19))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientFullMainPanelLayout.createSequentialGroup()
                                .addComponent(genderLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(middleNameTf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameTf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                                .addComponent(maleCbButton)
                                .addGap(29, 29, 29)
                                .addComponent(femaleCbButton))
                            .addComponent(dateOfBirthPicker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bloodTypeCB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phoneNumberTf, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nationalityTf, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(religionCB, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(civilStatusCB, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientIdTf, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imagePathLabel)
                            .addComponent(imageNameLabel))
                        .addGap(68, 68, 68)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imagePathTf, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imageNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(browseImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(temperatureStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(121, 121, 121))
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(patientIDLabel1))
                    .addComponent(temperatureBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                            .addComponent(temperatureBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(temperatureTf1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                            .addComponent(temperatureConvertButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(temperatureTf2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(temperatureClearAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(detectBPMButton, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bpmTf, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(patientIDLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(temperatureClearAllButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addComponent(firstItemInListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastItemInListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(previousItemInListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextItemInListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientFullMainPanelLayout.createSequentialGroup()
                            .addComponent(importExcelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(exportExcelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientFullMainPanelLayout.createSequentialGroup()
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientFullMainPanelLayout.createSequentialGroup()
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientFullMainPanelLayout.createSequentialGroup()
                .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterSearchTf, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184)
                        .addComponent(moveRowUpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveRowDownButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1886, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26))
        );
        patientFullMainPanelLayout.setVerticalGroup(
            patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addComponent(patientIDLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(temperatureBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(temperatureTf1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addComponent(temperatureStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(temperatureTf2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(temperatureBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(temperatureConvertButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(patientIDLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bpmTf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(detectBPMButton)
                            .addComponent(temperatureClearAllButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addComponent(labelImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(browseImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79))
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patientIDLabel)
                            .addComponent(patientIdTf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstNameLabel)
                            .addComponent(firstNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(middleNameLabel)
                            .addComponent(middleNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastNameLabel)
                            .addComponent(lastNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(genderLabel)
                            .addComponent(maleCbButton)
                            .addComponent(femaleCbButton))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateOfBirthLabel)
                            .addComponent(dateOfBirthPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bloodTypeLabel)
                            .addComponent(bloodTypeCB))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(civilStatusLabel)
                            .addComponent(civilStatusCB))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(religionLabel)
                            .addComponent(religionCB))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nationalityLabel)
                            .addComponent(nationalityTf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cellphoneNumberLabel)
                            .addComponent(phoneNumberTf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(imagePathTf, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imagePathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(imageNameLabel)
                            .addComponent(imageNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(80, 80, 80))
                    .addGroup(patientFullMainPanelLayout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(temperatureClearAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientFullMainPanelLayout.createSequentialGroup()
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exportExcelButton)
                            .addComponent(importExcelButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstItemInListButton)
                            .addComponent(lastItemInListButton)
                            .addComponent(previousItemInListButton)
                            .addComponent(nextItemInListButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(patientFullMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterSearchTf, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveRowUpButton)
                    .addComponent(moveRowDownButton)
                    .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        getContentPane().add(patientFullMainPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void selectPatient(int counter) {
        try {
            patientIdTf.setText(Integer.toString(dao.patientList().get(counter).getID()));
            firstNameTf.setText(dao.patientList().get(counter).getfirstName());
            middleNameTf.setText(dao.patientList().get(counter).getMiddleName());
            lastNameTf.setText(dao.patientList().get(counter).getLastName());
            String gender = dao.patientList().get(counter).getGender();
            if (gender.equals("Male")) {
                maleCbButton.setSelected(true);
            } else if (gender.contains("Female")) {
                femaleCbButton.setSelected(true);
            }
            String bloodTypeString = dao.patientList().get(counter).getbloodType();
            for (int row = 0; row < bloodTypeCB.getItemCount(); row++) {
                if (bloodTypeCB.getItemAt(row).equalsIgnoreCase(bloodTypeString)) {
                    bloodTypeCB.setSelectedIndex(row);
                }
            }
            String civilStatusString = dao.patientList().get(counter).getcivilStatus();
            for (int row = 0; row < civilStatusCB.getItemCount(); row++) {
                if (civilStatusCB.getItemAt(row).equalsIgnoreCase(civilStatusString)) {
                    civilStatusCB.setSelectedIndex(row);
                }
            }
            String religionString = dao.patientList().get(counter).getReligion();
            for (int row = 0; row < religionCB.getItemCount(); row++) {
                if (religionCB.getItemAt(row).equalsIgnoreCase(religionString)) {
                    religionCB.setSelectedIndex(row);
                }
            }
            nationalityTf.setText(dao.patientList().get(counter).getNationality());
            phoneNumberTf.setText(dao.patientList().get(counter).getphoneNumber());

            try {
                labelImage.setIcon(new ImageIcon(new ImageIcon(dao.patientList().get(counter).getimagePath()).getImage().getScaledInstance(labelImage.getWidth(), labelImage.getHeight(), Image.SCALE_SMOOTH)));
            } catch (Exception err) {
                labelImage.setText("no image found.");
                this.invalidate();
                this.validate();
                this.repaint();
            }
        } catch (IndexOutOfBoundsException err) {
            this.repaint();
        }
    }
    // limit phone number max

    // FILTER DATA
    private void filter(String query) {
        DefaultTableModel dm = (DefaultTableModel) patientDataTable.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(dm);
        patientDataTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(query));
    }

    public class JTextFieldLimit extends PlainDocument {

        private final int limit;

        JTextFieldLimit(int limit) {
            super();
            this.limit = limit;
        }

        @Override
        public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
            if (str == null) {
                return;
            }

            if ((getLength() + str.length()) <= limit) {
                super.insertString(offset, str, attr);
            }
        }
    }
    private void phoneNumberTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneNumberTfKeyTyped
        // allow only numbers
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_phoneNumberTfKeyTyped

    private void browseImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseImageButtonActionPerformed
        // Default image location

        String currentDirectoryPath = "C:\\Users\\Public\\Pictures\\";
        JFileChooser imageFileChooser = new JFileChooser(currentDirectoryPath);
        int imageChooser = imageFileChooser.showOpenDialog(null);
        imageFileChooser.setDialogTitle("Chose Image...");
        //Only choose "png", "jpg", "jpeg" files
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("IMAGES", "png", "jpg", "jpeg");
        imageFileChooser.setFileFilter(fnef);
        try {
            if (imageChooser == JFileChooser.APPROVE_OPTION) {
                File imageFile = imageFileChooser.getSelectedFile();
                String imageFileName = imageFile.getName();
                String imageFilePath = imageFile.getAbsolutePath();
                imageNameTf.setText(imageFileName); // display image name in the textfield

                ImageIcon imageIcon = new ImageIcon(imageFilePath);
                // resize image to fill LabelImage
                Image image = imageIcon.getImage().getScaledInstance(labelImage.getWidth(), labelImage.getHeight(), Image.SCALE_SMOOTH);
                // Display Image on LabelImage
                ImageIcon resizedImagedIcon = new ImageIcon(image);
                labelImage.setIcon(resizedImagedIcon);
                // Display Image Path in imagePathTf
                imagePathTf.setText(imageFilePath);
                image_path = imageFilePath;
            }
        } catch (Exception err) {
            labelImage.setText("no image found.");
        }

    }//GEN-LAST:event_browseImageButtonActionPerformed
    public boolean verifyFields() throws ParseException {
        String firstNameString = firstNameTf.getText();
        String middleNameString = middleNameTf.getText();
        String lastNameString = lastNameTf.getText();
        String selectedbDay = dateOfBirthPicker.getText();
        String nationalityString = nationalityTf.getText();
        // Check empty fields
        if (firstNameString.trim().equals("") || middleNameString.trim().equals("")
                || lastNameString.trim().equals("") || selectedbDay.trim().equals("")
                || nationalityString.equals("")) {
            JOptionPane.showMessageDialog(null, "One or more fields are empty.\nPlease fill-up all forms.", "Empty fields", JOptionPane.INFORMATION_MESSAGE);
            this.repaint();
            return false;
        } // If everything is okay...
        else {
            return true;
        }
    }
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (image_path == null) {
            JOptionPane.showMessageDialog(null, "It is recommended to have an image of the patient to verify identity.", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                firstName = firstNameTf.getText();
                middleName = middleNameTf.getText();
                lastName = lastNameTf.getText();

                if (maleCbButton.isSelected()) {
                    genderSelect = "Male";
                } else if (femaleCbButton.isSelected()) {
                    genderSelect = "Female";
                }

                dateOfBirth = dateOfBirthPicker.getDateStringOrEmptyString(); // bday
                bloodType = String.valueOf(bloodTypeCB.getSelectedItem());
                civilStatus = String.valueOf(civilStatusCB.getSelectedItem());
                religion = String.valueOf(religionCB.getSelectedItem());
                nationality = nationalityTf.getText();
                cellphoneNumber = phoneNumberTf.getText();

                if (verifyFields()) {
                    PreparedStatement pst;
                    String registerPatientQuery = "INSERT INTO `patients`(`FirstName`, `MiddleName`, `LastName`, `Gender`, `DateOfBirth`, `BloodType`, `CivilStatus`, `Religion`, `Nationality`, `CellphoneNumber`, `ImagePath`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";

                    try {

                        pst = (PreparedStatement) HEALTH_MONITORING_SYSTEM_DATABASE.getConnection().prepareStatement(registerPatientQuery);
                        pst.setString(1, firstName);
                        pst.setString(2, middleName);
                        pst.setString(3, lastName);
                        pst.setString(4, genderSelect);
                        pst.setString(5, dateOfBirth);
                        pst.setString(6, bloodType);
                        pst.setString(7, civilStatus);
                        pst.setString(8, religion);
                        pst.setString(9, nationality);
                        pst.setString(10, cellphoneNumber);

                        try {
                            // Save the image as BLOB in the Database
                            if (image_path != null) {

                                InputStream image = new FileInputStream(new File(image_path));
                                pst.setBlob(11, image);
                            } else if (image_path == null) {
                                pst.setNull(11, java.sql.Types.NULL);
                                System.out.println("No image attached.");
                            } else {
                                pst.setNull(1, java.sql.Types.NULL);
                                System.out.println("No image attached.");
                            }
                            if (pst.executeUpdate() != 0) {
                                JOptionPane.showMessageDialog(null, "Patient data added.");
                                clearAllInputFields();
                                // Refresh patientDataTable after adding new entry to database
                                dao.populatepatientDataTableFromMySQLDatabase(model, patientDataTable);

                                this.invalidate();
                                this.validate();
                                this.repaint();
                            } else {
                                JOptionPane.showMessageDialog(null, "Error: Check your Information.");
                            }
                            pst.setNull(11, java.sql.Types.NULL);
                        } catch (FileNotFoundException ex) {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                    } catch (HeadlessException | SQLException ex) {
                        JOptionPane.showMessageDialog(null, ex);
                    }

                }
            } catch (ParseException ex) {
                Logger.getLogger(HMS_PATIENT_MANAGEMENTSYSTEM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void nationalityTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nationalityTfKeyTyped
        char charInputOnly = evt.getKeyChar();
        if (!(Character.isAlphabetic(charInputOnly) || (charInputOnly == KeyEvent.VK_BACK_SPACE) || charInputOnly == KeyEvent.VK_DELETE || charInputOnly == KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_nationalityTfKeyTyped

    private void firstNameTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_firstNameTfKeyTyped
        char charInputOnly = evt.getKeyChar();
        if (!(Character.isAlphabetic(charInputOnly) || (charInputOnly == KeyEvent.VK_BACK_SPACE) || charInputOnly == KeyEvent.VK_DELETE || charInputOnly == KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_firstNameTfKeyTyped

    private void middleNameTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_middleNameTfKeyTyped
        char charInputOnly = evt.getKeyChar();
        if (!(Character.isAlphabetic(charInputOnly) || (charInputOnly == KeyEvent.VK_BACK_SPACE) || charInputOnly == KeyEvent.VK_DELETE || charInputOnly == KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_middleNameTfKeyTyped

    private void lastNameTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lastNameTfKeyTyped
        char charInputOnly = evt.getKeyChar();
        if (!(Character.isAlphabetic(charInputOnly) || (charInputOnly == KeyEvent.VK_BACK_SPACE) || charInputOnly == KeyEvent.VK_DELETE || charInputOnly == KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_lastNameTfKeyTyped
    private void clearAllInputFields() {
        patientIdTf.setText("");
        firstNameTf.setText("");
        middleNameTf.setText("");
        lastNameTf.setText("");
        genderGroup.clearSelection();
        bloodTypeCB.setSelectedIndex(0);
        civilStatusCB.setSelectedIndex(0);
        religionCB.setSelectedIndex(9);
        nationalityTf.setText("");
        phoneNumberTf.setText("");
        labelImage.setIcon(null);
        labelImage.setText("");
        image_path = null;
        imagePathTf.setText("");
        imageNameTf.setText("");
        patientDataTable.clearSelection();
        this.invalidate();
        this.validate();
        this.repaint();

    }
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearAllInputFields();
        this.invalidate();
        this.validate();
        this.repaint();
    }//GEN-LAST:event_clearButtonActionPerformed

    int patientDataTableSelectedRow;
    private void patientDataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientDataTableMouseClicked
        patientDataTableSelectedRow = patientDataTable.getSelectedRow();

        // make currentPosition start counting from the selected JTable Row
        currentPosition = patientDataTableSelectedRow;
        selectPatient(patientDataTableSelectedRow);
    }//GEN-LAST:event_patientDataTableMouseClicked

    private void firstItemInListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstItemInListButtonActionPerformed
        currentPosition = 0;
        selectPatient(currentPosition);
    }//GEN-LAST:event_firstItemInListButtonActionPerformed

    private void lastItemInListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastItemInListButtonActionPerformed
        currentPosition = dao.patientList().size() - 1;
        selectPatient(currentPosition);
    }//GEN-LAST:event_lastItemInListButtonActionPerformed

    private void nextItemInListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextItemInListButtonActionPerformed
        // Increment currentPosition to display  next item on input fields

        currentPosition++;

        if (currentPosition > dao.patientList().size() - 1) {
            currentPosition = 0;
        }

        // If you reach the last item , move back to the first item.
        selectPatient(currentPosition);
    }//GEN-LAST:event_nextItemInListButtonActionPerformed

    private void previousItemInListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousItemInListButtonActionPerformed
        // Decrenebt currentPosition to access/view previous item in a list

        currentPosition--;
        if (currentPosition < 0) {
            currentPosition = dao.patientList().size() - 1;
        }
        selectPatient(currentPosition);
    }//GEN-LAST:event_previousItemInListButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        // first check if the ID field is Empty.)
        if (patientIdTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "ID Field is Empty.");
        } else {

            // Delete data from MySQL Database
            Connection dbconnection = null;
            PreparedStatement pst = null;
            String deleteSQLQuery = "DELETE FROM `patients` WHERE id = ?";

            try {
                dbconnection = this.connx;
                pst = (PreparedStatement) dbconnection.prepareStatement(deleteSQLQuery);
                pst.setInt(1, Integer.parseInt(patientIdTf.getText()));
                int deleteSTMT = pst.executeUpdate();

                if (deleteSTMT > 0) {
                    JOptionPane.showMessageDialog(null, "Deleted Data Successfully!");
                    // Close inpt fields after deleting  
                    clearAllInputFields();
                    // Refresh JTable to remove deleted row
                    dao.populatepatientDataTableFromMySQLDatabase(model, patientDataTable);
                    this.invalidate();
                    this.validate();
                    this.repaint();

                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            } finally {
                // Close Connection
                try {
                    if (pst != null) {
                        pst.close();
                    }
//                    if (dbconnection != null) {
//                        dbconnection.close();
//                    }
                } catch (SQLException sQLException) {
                    sQLException.getMessage();
                }
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (patientIdTf.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "ID Field is Empty.");
        } else {

            if (labelImage == null) {
                JOptionPane.showMessageDialog(null, "It is recommended to have an image of the patient to verify identity.\nPlease insert or update the image.", "Information", JOptionPane.INFORMATION_MESSAGE);
            } else {

                try {
                    firstName = firstNameTf.getText();
                    middleName = middleNameTf.getText();
                    lastName = lastNameTf.getText();

                    if (maleCbButton.isSelected()) {
                        genderSelect = "Male";
                    } else if (femaleCbButton.isSelected()) {
                        genderSelect = "Female";
                    }

                    dateOfBirth = dateOfBirthPicker.getDateStringOrEmptyString(); // bday
                    bloodType = String.valueOf(bloodTypeCB.getSelectedItem());
                    civilStatus = String.valueOf(civilStatusCB.getSelectedItem());
                    religion = String.valueOf(religionCB.getSelectedItem());
                    nationality = nationalityTf.getText();
                    cellphoneNumber = phoneNumberTf.getText();

                    if (verifyFields()) {
                        PreparedStatement pst;
                        String updatePatientQuery = "UPDATE `patients` SET `FirstName`=?,`MiddleName`=?,`LastName`=?,`Gender`=?,`DateOfBirth`=?,`BloodType`=?,`CivilStatus`=?,`Religion`=?,`Nationality`=?,`CellphoneNumber`=?,`ImagePath`=? WHERE id = " + patientIdTf.getText();

                        try {

                            pst = (PreparedStatement) HEALTH_MONITORING_SYSTEM_DATABASE.getConnection().prepareStatement(updatePatientQuery);
                            pst.setString(1, firstName);
                            pst.setString(2, middleName);
                            pst.setString(3, lastName);
                            pst.setString(4, genderSelect);
                            pst.setString(5, dateOfBirth);
                            pst.setString(6, bloodType);
                            pst.setString(7, civilStatus);
                            pst.setString(8, religion);
                            pst.setString(9, nationality);
                            pst.setString(10, cellphoneNumber);

                            try {
                                // Save the image as BLOB in the Database
                                if (image_path != null) {

                                    InputStream image = new FileInputStream(new File(image_path));
                                    pst.setBlob(11, image);
                                } else if (image_path == null) {
                                    pst.setNull(11, java.sql.Types.NULL);
                                    System.out.println("No image attached.");
                                } else {
                                    pst.setNull(1, java.sql.Types.NULL);
                                    System.out.println("No image attached.");
                                }
                                if (pst.executeUpdate() != 0) {
                                    JOptionPane.showMessageDialog(null, "Patient data has been updated.");
                                    clearAllInputFields();
                                    this.invalidate();
                                    this.validate();
                                    this.repaint();
                                    // Refresh patientDataTable after adding new entry to database
                                    dao.populatepatientDataTableFromMySQLDatabase(model, patientDataTable);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Error: Check your Information.");
                                }
                                pst.setNull(11, java.sql.Types.NULL);
                            } catch (FileNotFoundException ex) {
                                JOptionPane.showMessageDialog(null, ex);
                            }
                        } catch (HeadlessException | SQLException ex) {
                            JOptionPane.showMessageDialog(null, ex);
                        }

                    }
                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }
        }


    }//GEN-LAST:event_updateButtonActionPerformed

    private void exportExcelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportExcelButtonActionPerformed
        String currentDirectoryFilePathToExport = "C:\\Users\\Public\\Desktop";
        JFileChooser excelExportChooser = new JFileChooser(currentDirectoryFilePathToExport);
        // Filter only excel files
        FileNameExtensionFilter excelFNEF = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        excelExportChooser.setFileFilter(excelFNEF);
        // Set Dialogue Box Title
        excelExportChooser.setDialogTitle("Export Patient Database");
        int excelChooser = excelExportChooser.showSaveDialog(null);

        if (excelChooser == JFileChooser.APPROVE_OPTION) {

            // Add Excel Library to ClassPath.
            XSSFWorkbook excelXSSFWorkBookExporter = new XSSFWorkbook();
            XSSFSheet excelSheet = excelXSSFWorkBookExporter.createSheet("Patient's Data");
            // Loop through JTable columns and rows

            for (int i = 0; i < model.getRowCount(); i++) {
                XSSFRow excelRow = excelSheet.createRow(i);
                for (int j = 0; j < model.getColumnCount(); j++) {
                    XSSFCell excelCell = excelRow.createCell(j);

                    excelCell.setCellValue(model.getValueAt(i, j).toString());
                }
            }
            // Create unique name by using existing excel file names and appending .xlsx

            FileOutputStream excelFIS;
            BufferedOutputStream excelBOS;
            try {
                excelFIS = new FileOutputStream(excelExportChooser.getSelectedFile() + ".xlsx");
                excelBOS = new BufferedOutputStream(excelFIS);
                excelXSSFWorkBookExporter.write(excelBOS);
                excelBOS.close();
                excelXSSFWorkBookExporter.close();
            } catch (IOException iOException) {
            }
            JOptionPane.showMessageDialog(null, "Exported data successfully.");
        }
    }//GEN-LAST:event_exportExcelButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        try {
            boolean printPatientTable = patientDataTable.print();

            if (!printPatientTable) {
            } else {
                JOptionPane.showMessageDialog(null, "Printed successfully.");
            }

        } catch (PrinterException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_printButtonActionPerformed

    private void importExcelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importExcelButtonActionPerformed
        ImportDataFromExcel showImportDataFromExcelFrame = new ImportDataFromExcel();
        showImportDataFromExcelFrame.setVisible(true);
    }//GEN-LAST:event_importExcelButtonActionPerformed

    private void moveRowUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRowUpButtonActionPerformed

        // GetSelectedRow First and Store its value in a variable
        int getSelectedRow = patientDataTable.getSelectedRow();
        if (getSelectedRow > 0) {
            System.out.println(getSelectedRow);
            model.moveRow(getSelectedRow, getSelectedRow, getSelectedRow - 1);
            patientDataTable.getSelectionModel().setSelectionInterval(getSelectedRow - 1, getSelectedRow - 1);
        } else {
            JOptionPane.showMessageDialog(null, "You have reached the top row.");
        }
    }//GEN-LAST:event_moveRowUpButtonActionPerformed

    private void moveRowDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRowDownButtonActionPerformed
        int getSelectedRow = patientDataTable.getSelectedRow();
        if (getSelectedRow > 0) {
            model.moveRow(getSelectedRow, getSelectedRow, getSelectedRow + 1);
            patientDataTable.getSelectionModel().setSelectionInterval(getSelectedRow + 1, getSelectedRow + 1);
        } else {
            JOptionPane.showMessageDialog(null, "You have reached the bottom row.");
        }
    }//GEN-LAST:event_moveRowDownButtonActionPerformed

    private void patientDataTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientDataTableKeyReleased
        // Get the selected row index
        patientDataTableSelectedRow = patientDataTable.getSelectedRow();
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            selectPatient(patientDataTableSelectedRow);
        }
    }//GEN-LAST:event_patientDataTableKeyReleased

    private void filterSearchTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterSearchTfKeyReleased
        String query = filterSearchTf.getText();
        filter(query);
    }//GEN-LAST:event_filterSearchTfKeyReleased

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        HMS_MAIN showMainForm = new HMS_MAIN();
        showMainForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void temperatureTf1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_temperatureTf1KeyTyped
        // allow only numbers and one decimal place
        char charInput = evt.getKeyChar();
        if (Character.isLetter(charInput) && !evt.isAltDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_temperatureTf1KeyTyped

    private void temperatureTf2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_temperatureTf2KeyTyped

    }//GEN-LAST:event_temperatureTf2KeyTyped

    private void temperatureClearAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temperatureClearAllButtonActionPerformed
        temperatureTf1.setText("");
        temperatureTf2.setText("");
        temperatureStatus.setText("");
        temperatureStatus.setForeground(Color.black);
    }//GEN-LAST:event_temperatureClearAllButtonActionPerformed

    private void temperatureConvertButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temperatureConvertButton1ActionPerformed
        box1 = (String) temperatureBox1.getSelectedItem();
        box2 = (String) temperatureBox2.getSelectedItem();
        String inputtedTempBox1 = temperatureTf1.getText();

        try {

            if (box1.equals("Celsius") && box2.equals("Fahrenheit")) {

                for (int i = 1; i <= 10; i++) {
                    double bpmDigitGenerated = Math.random();
                    int convertedHundredthBPM = (int) (bpmDigitGenerated * 800);
                    convertedHundredthBPM = Math.max(convertedHundredthBPM, 30);
                    convertedHundredthBPM = Math.min(convertedHundredthBPM, 80);

                    String convertedStringCelciusDIGIT = String.valueOf(convertedHundredthBPM);
                    double c = Double.parseDouble(convertedStringCelciusDIGIT);
                    double f = (double) (c * 1.8 + 32);
                    temperatureTf1.setText(String.valueOf(c));
                    temperatureTf2.setText(String.valueOf(f));
                }

            } else if (box1.equals("Celsius") && box2.equals("Kelvin")) {
                for (int i = 1; i <= 10; i++) {
                    double bpmDigitGenerated = Math.random();
                    int convertedHundredthBPM = (int) (bpmDigitGenerated * 80);
                    convertedHundredthBPM = Math.max(convertedHundredthBPM, 30);
                    convertedHundredthBPM = Math.min(convertedHundredthBPM, 80);
                    String convertedStringCelciusDIGIT = String.valueOf(convertedHundredthBPM);
                    double c = Double.parseDouble(convertedStringCelciusDIGIT);
                    double k = (double) (c + 273.15);
                    temperatureTf1.setText(String.valueOf(c));
                    temperatureTf2.setText(String.valueOf(k));
                }
            } else if (box1.equals("Celsius") && box2.equals("Celsius")) {
                for (int i = 1; i <= 10; i++) {
                    double bpmDigitGenerated = Math.random();
                    int convertedHundredthBPM = (int) (bpmDigitGenerated * 80);
                    convertedHundredthBPM = Math.max(convertedHundredthBPM, 30);
                    convertedHundredthBPM = Math.min(convertedHundredthBPM, 80);
                    String convertedStringCelciusDIGIT = String.valueOf(convertedHundredthBPM);
                    double c = Double.parseDouble(convertedStringCelciusDIGIT);
                    temperatureTf1.setText(String.valueOf(c));
                    temperatureTf2.setText(String.valueOf(c));
                }
            }
            //---------------------------------------------------------------------
            if (box1.equals("Fahrenheit") && box2.equals("Celsius")) {
                for (int i = 1; i <= 10; i++) {
                    double bpmDigitGenerated = Math.random();
                    int convertedHundredthBPM = (int) (bpmDigitGenerated * 115);
                    convertedHundredthBPM = Math.max(convertedHundredthBPM, 85);
                    convertedHundredthBPM = Math.min(convertedHundredthBPM, 115);
                    String convertedStringFahrenheitDIGIT = String.valueOf(convertedHundredthBPM);
                    double f = Double.parseDouble(convertedStringFahrenheitDIGIT);
                    double c = (double) ((f - 32) * 5 / 9);
                    temperatureTf1.setText(String.valueOf(f));
                    temperatureTf2.setText(String.valueOf(c));
                }

            } else if (box1.equals("Fahrenheit") && box2.equals("Kelvin")) {
                for (int i = 1; i <= 10; i++) {
                    double bpmDigitGenerated = Math.random();
                    int convertedHundredthBPM = (int) (bpmDigitGenerated * 115);
                    convertedHundredthBPM = Math.max(convertedHundredthBPM, 85);
                    convertedHundredthBPM = Math.min(convertedHundredthBPM, 115);
                    String convertedStringFahrenheitDIGIT = String.valueOf(convertedHundredthBPM);
                    double f = Double.parseDouble(convertedStringFahrenheitDIGIT);
                    double k = (double) ((f - 32) * 5 / 9 + 273.15);
                    temperatureTf1.setText(String.valueOf(f));
                    temperatureTf2.setText(String.valueOf(k));
                }
            } else if (box1.equals("Fahrenheit") && box2.equals("Fahrenheit")) {
                for (int i = 1; i <= 10; i++) {
                    double bpmDigitGenerated = Math.random();
                    int convertedHundredthBPM = (int) (bpmDigitGenerated * 115);
                    convertedHundredthBPM = Math.max(convertedHundredthBPM, 85);
                    convertedHundredthBPM = Math.min(convertedHundredthBPM, 115);
                    String convertedStringFahrenheitDIGIT = String.valueOf(convertedHundredthBPM);
                    double f = Double.parseDouble(convertedStringFahrenheitDIGIT);
                    temperatureTf1.setText(String.valueOf(f));
                    temperatureTf2.setText(String.valueOf(f));
                }
            }

//-----------------------------------------------------------------------------
//------------------------------------------------------------------------------
//            double temperatureTF1GetText = Double.parseDouble(temperatureTf1.getText());
//            if (temperatureTF1GetText <= 0 && temperatureTF1GetText >= 35.3 && box1.equals("Celsius") && box2.equals("Celsius")) {
//                temperatureStatus.setText("Possible cold body temperature!");
//                temperatureStatus.setForeground(Color.red);
//            } else if (temperatureTF1GetText >= 35.4 || temperatureTF1GetText >= 37.7 && box1.equals("Celsius") && box2.equals("Celsius")) {
//                temperatureStatus.setText("Normal body temperature");
//                temperatureStatus.setForeground(Color.blue);
//            } else if (temperatureTF1GetText >= 37.8 || temperatureTF1GetText >= 39.0 && box1.equals("Celsius") && box2.equals("Celsius")) {
//                temperatureStatus.setText("Moderate fever body temperature");
//                temperatureStatus.setForeground(Color.yellow);
//            } else if (temperatureTF1GetText > 39.0 || box1.equals("Celsius") && box2.equals("Celsius")) {
//                temperatureStatus.setText("High fever body temperature");
//                temperatureStatus.setForeground(Color.red);
//            }
//            }
        } catch (NumberFormatException err) {
            JOptionPane.showMessageDialog(null, "Device not detected.");
        }

    }//GEN-LAST:event_temperatureConvertButton1ActionPerformed

    private void detectBPMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectBPMButtonActionPerformed
        for (int i = 1; i <= 10; i++) {
            double bpmDigitGenerated = Math.random();
            int convertedHundredthBPM = (int) (bpmDigitGenerated * 500);
            convertedHundredthBPM = Math.max(convertedHundredthBPM, 60);
            convertedHundredthBPM = Math.min(convertedHundredthBPM, 500);

            String convertedStringBPMDIGIT = String.valueOf(convertedHundredthBPM);
            bpmTf.setText(convertedStringBPMDIGIT);
        }
    }//GEN-LAST:event_detectBPMButtonActionPerformed

    private void temperatureClearAllButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temperatureClearAllButton1ActionPerformed
        bpmTf.setText("");
    }//GEN-LAST:event_temperatureClearAllButton1ActionPerformed

    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException
                | InstantiationException
                | IllegalAccessException
                | UnsupportedLookAndFeelException e) {
            System.out.println(e);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new HMS_PATIENT_MANAGEMENTSYSTEM().setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(HMS_PATIENT_MANAGEMENTSYSTEM.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox<String> bloodTypeCB;
    private javax.swing.JLabel bloodTypeLabel;
    private javax.swing.JTextField bpmTf;
    private javax.swing.JButton browseImageButton;
    private javax.swing.JLabel cellphoneNumberLabel;
    private javax.swing.JComboBox<String> civilStatusCB;
    private javax.swing.JLabel civilStatusLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel dateOfBirthLabel;
    private com.github.lgooddatepicker.components.DatePicker dateOfBirthPicker;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton detectBPMButton;
    private javax.swing.JButton exportExcelButton;
    private javax.swing.JCheckBox femaleCbButton;
    private javax.swing.JTextField filterSearchTf;
    private javax.swing.JButton firstItemInListButton;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTf;
    private javax.swing.ButtonGroup genderGroup;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JLabel imageNameLabel;
    private javax.swing.JTextField imageNameTf;
    private javax.swing.JLabel imagePathLabel;
    private javax.swing.JTextField imagePathTf;
    private javax.swing.JButton importExcelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelImage;
    private javax.swing.JButton lastItemInListButton;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTf;
    private javax.swing.JCheckBox maleCbButton;
    private javax.swing.JLabel middleNameLabel;
    private javax.swing.JTextField middleNameTf;
    private javax.swing.JButton moveRowDownButton;
    private javax.swing.JButton moveRowUpButton;
    private javax.swing.JLabel nationalityLabel;
    private javax.swing.JTextField nationalityTf;
    private javax.swing.JButton nextItemInListButton;
    public static javax.swing.JTable patientDataTable;
    private javax.swing.JPanel patientFullMainPanel;
    private javax.swing.JLabel patientIDLabel;
    private javax.swing.JLabel patientIDLabel1;
    private javax.swing.JLabel patientIDLabel2;
    private javax.swing.JTextField patientIdTf;
    private javax.swing.JTextField phoneNumberTf;
    private javax.swing.JButton previousItemInListButton;
    private javax.swing.JButton printButton;
    private javax.swing.JComboBox<String> religionCB;
    private javax.swing.JLabel religionLabel;
    private javax.swing.JComboBox<String> temperatureBox1;
    private javax.swing.JComboBox<String> temperatureBox2;
    private javax.swing.JButton temperatureClearAllButton;
    private javax.swing.JButton temperatureClearAllButton1;
    private javax.swing.JButton temperatureConvertButton1;
    private javax.swing.JLabel temperatureStatus;
    private javax.swing.JTextField temperatureTf1;
    private javax.swing.JTextField temperatureTf2;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
