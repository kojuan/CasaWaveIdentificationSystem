/*
 * Copyright (C) 2020 khian
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package healthMonitoringSystem;

import java.awt.HeadlessException;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author khian
 */
public class ImportDataFromExcel extends javax.swing.JFrame {

    HMS_DATABASECONNECTION dbConnect = new HMS_DATABASECONNECTION();

    Connection dbConnection = null;
    int insertedRows = 0;
    HMS_DATAACCESSOBJECT daoImportedExcel = new HMS_DATAACESSOBJECT_IMPLEMENTATION();

    /**
     * Creates new form ImportDataFromExcel
     */
    public ImportDataFromExcel() {
        initComponents();
        dbConnection = dbConnect.databaseConnection();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableRowsToBeImported = new javax.swing.JTable();
        importToExcelButton = new javax.swing.JButton();
        resetClearRowButton = new javax.swing.JButton();
        insertToDatabaseButton = new javax.swing.JButton();
        insertToDatabaseButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1500, 720));
        setMinimumSize(new java.awt.Dimension(1500, 720));
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setMaximumSize(new java.awt.Dimension(1500, 720));
        mainPanel.setMinimumSize(new java.awt.Dimension(1500, 720));
        mainPanel.setPreferredSize(new java.awt.Dimension(1500, 720));

        tableRowsToBeImported.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Middle Name", "Last Name", "Gender", "Birthday", "Blood Type", "Civil Status", "Religion", "Nationality", "Cellphone Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableRowsToBeImported);

        importToExcelButton.setBackground(new java.awt.Color(228, 228, 255));
        importToExcelButton.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        importToExcelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/excel.png"))); // NOI18N
        importToExcelButton.setText("Import (Excel)");
        importToExcelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importToExcelButtonActionPerformed(evt);
            }
        });

        resetClearRowButton.setBackground(new java.awt.Color(228, 228, 255));
        resetClearRowButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        resetClearRowButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/clearIcon.png"))); // NOI18N
        resetClearRowButton.setText("Reset / Clear Rows");
        resetClearRowButton.setEnabled(false);
        resetClearRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetClearRowButtonActionPerformed(evt);
            }
        });

        insertToDatabaseButton.setBackground(new java.awt.Color(228, 228, 255));
        insertToDatabaseButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        insertToDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/addIcon.png"))); // NOI18N
        insertToDatabaseButton.setText("Insert to Database");
        insertToDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertToDatabaseButtonActionPerformed(evt);
            }
        });

        insertToDatabaseButton1.setBackground(new java.awt.Color(228, 228, 255));
        insertToDatabaseButton1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        insertToDatabaseButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/healthMonitoringSystem/APP_IMAGES/mainprogram/printerIcon.png"))); // NOI18N
        insertToDatabaseButton1.setText("Print");
        insertToDatabaseButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertToDatabaseButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1500, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(importToExcelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resetClearRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(insertToDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(insertToDatabaseButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(importToExcelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(resetClearRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertToDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertToDatabaseButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    DefaultTableModel ImportDataFromExcelModel;
    private void importToExcelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importToExcelButtonActionPerformed

        ImportDataFromExcelModel = (DefaultTableModel) tableRowsToBeImported.getModel();
        // Clear JTable before importing excel file
        ImportDataFromExcelModel.setRowCount(0);

        FileInputStream excelFIS = null;
        BufferedInputStream excelBIS = null;
        // Default directory pth to Public Desktop
        String currentDirectoryPath = "C:\\Users\\Public\\Desktop";
        JFileChooser excelFileChooserImport = new JFileChooser(currentDirectoryPath);
        // Show only excel file
        FileNameExtensionFilter excelFileNameExtensionFilter = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
        excelFileChooserImport.setFileFilter(excelFileNameExtensionFilter);
        int excelChooser = excelFileChooserImport.showOpenDialog(null);

        // if Open button is clicked
        if (excelChooser == JFileChooser.APPROVE_OPTION) {

            try {
                File excelFile = excelFileChooserImport.getSelectedFile();
                excelFIS = new FileInputStream(excelFile);
                excelBIS = new BufferedInputStream(excelFIS);
                XSSFWorkbook excelImportWorkBook = new XSSFWorkbook(excelBIS);
                XSSFSheet excelSheet = excelImportWorkBook.getSheetAt(0);

                for (int row = 0; row <= excelSheet.getLastRowNum(); row++) {
                    XSSFRow excelRow = excelSheet.getRow(row);

                    XSSFCell excelImportedID = excelRow.getCell(0);
                    XSSFCell excelImportedFirstName = excelRow.getCell(1);
                    XSSFCell excelImportedMiddleName = excelRow.getCell(2);
                    XSSFCell excelImportedLastName = excelRow.getCell(3);
                    XSSFCell excelImportedGender = excelRow.getCell(4);
                    XSSFCell excelImportedBirthday = excelRow.getCell(5);
                    XSSFCell excelImportedBloodType = excelRow.getCell(6);
                    XSSFCell excelImportedCivilStatus = excelRow.getCell(7);
                    XSSFCell excelImportedReligion = excelRow.getCell(8);
                    XSSFCell excelImportedNationality = excelRow.getCell(9);
                    XSSFCell excelImportedImagePath = excelRow.getCell(10);

                    System.out.println(excelImportedID);
                    ImportDataFromExcelModel.addRow(new Object[]{excelImportedID,
                        excelImportedFirstName, excelImportedMiddleName, excelImportedLastName,
                        excelImportedGender, excelImportedBirthday, excelImportedBloodType,
                        excelImportedCivilStatus, excelImportedReligion, excelImportedNationality, excelImportedImagePath});
                }
                JOptionPane.showMessageDialog(null, "Data Imported successfully.");
                resetClearRowButton.setEnabled(true);
                importToExcelButton.setEnabled(false);

            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, ex);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }

        }

    }//GEN-LAST:event_importToExcelButtonActionPerformed

    private void resetClearRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetClearRowButtonActionPerformed
        int rowCount = ImportDataFromExcelModel.getRowCount();
        // Remove JTable rows from last
        for (int row = rowCount - 1; row >= 0; row--) {
            ImportDataFromExcelModel.removeRow(row);
        }
        JOptionPane.showMessageDialog(null, rowCount + " row(s) is/are cleared in the list.\nYou may now import again.");
        importToExcelButton.setEnabled(true);
        resetClearRowButton.setEnabled(false);
    }//GEN-LAST:event_resetClearRowButtonActionPerformed

    private void insertToDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertToDatabaseButtonActionPerformed
        int tableRows = tableRowsToBeImported.getRowCount();
        String SQLInsertDataImportedFromExcel = "INSERT INTO `patients`(`FirstName`, `MiddleName`, `LastName`, `Gender`, `DateOfBirth`, `BloodType`, `CivilStatus`, `Religion`, `Nationality`, `CellphoneNumber`, `ImagePath`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
        PreparedStatement pst = null;
//        Connection conn = dbConnection;

        for (int row = 0; row < tableRows; row++) {
            String FirstNameString = ImportDataFromExcelModel.getValueAt(row, 1).toString();
            String MiddleNameString = ImportDataFromExcelModel.getValueAt(row, 2).toString();
            String LastNameString = ImportDataFromExcelModel.getValueAt(row, 3).toString();
            String GenderString = ImportDataFromExcelModel.getValueAt(row, 4).toString();
            String BirthdayString = ImportDataFromExcelModel.getValueAt(row, 5).toString();
            String BloodType = ImportDataFromExcelModel.getValueAt(row, 6).toString();
            String CivilStatus = ImportDataFromExcelModel.getValueAt(row, 7).toString();
            String Religion = ImportDataFromExcelModel.getValueAt(row, 8).toString();
            String Nationality = ImportDataFromExcelModel.getValueAt(row, 9).toString();
            String CellphoneNumber = ImportDataFromExcelModel.getValueAt(row, 10).toString();
            String ImagePath = null;

            try {
                pst = (com.mysql.jdbc.PreparedStatement) HEALTH_MONITORING_SYSTEM_DATABASE.getConnection().prepareStatement(SQLInsertDataImportedFromExcel);
                pst.setString(1, FirstNameString);
                pst.setString(2, MiddleNameString);
                pst.setString(3, LastNameString);
                pst.setString(4, GenderString);
                pst.setString(5, BirthdayString);
                pst.setString(6, BloodType);
                pst.setString(7, CivilStatus);
                pst.setString(8, Religion);
                pst.setString(9, Nationality);
                pst.setString(10, CellphoneNumber);

                try {
                    // Save the image as BLOB in the Database
                    if (ImagePath != null) {

                        InputStream image = new FileInputStream(new File(ImagePath));
                        pst.setBlob(11, image);
                    } else if (ImagePath == null) {
                        pst.setNull(11, java.sql.Types.NULL);
                        System.out.println("No image detected.");
                    } else {
                        pst.setNull(1, java.sql.Types.NULL);
                        System.out.println("No image detected.");
                    }
                    if (pst.executeUpdate() != 0) {
                        insertedRows++;
                        daoImportedExcel.populatepatientDataTableFromMySQLDatabase(HMS_PATIENT_MANAGEMENTSYSTEM.model, HMS_PATIENT_MANAGEMENTSYSTEM.patientDataTable);
                    } else {
                        JOptionPane.showMessageDialog(null, "Error: Cannot import data to the database.");
                    }

                    pst.setNull(11, java.sql.Types.NULL);

                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            } catch (HeadlessException | SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }

        }
        JOptionPane.showMessageDialog(null,
                "Imported Data successfully added to the Patient database.\nKeep in mind that the images are not imported.\nPlease update images of all imported data\n",
                "Success", JOptionPane.INFORMATION_MESSAGE);

//        try {
//            // Refresh JTable
//            HMS_PATIENT_MANAGEMENTSYSTEM patientManagementSystemProject = new HMS_PATIENT_MANAGEMENTSYSTEM();
//            patientManagementSystemProject.populatepatientDataTableFromMySQLDatabase();
//        } catch (Exception ex) {
//            Logger.getLogger(ImportDataFromExcel.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_insertToDatabaseButtonActionPerformed

    private void insertToDatabaseButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertToDatabaseButton1ActionPerformed
        boolean printImportedExcel;
        try {
            printImportedExcel = tableRowsToBeImported.print();
            if (!printImportedExcel) {
                JOptionPane.showMessageDialog(null, "Print cancelled or unable to print.");
            } else {
                JOptionPane.showMessageDialog(null, "Printed successfully.");
            }
        } catch (PrinterException ex) {
            Logger.getLogger(ImportDataFromExcel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_insertToDatabaseButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportDataFromExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportDataFromExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportDataFromExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportDataFromExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImportDataFromExcel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton importToExcelButton;
    private javax.swing.JButton insertToDatabaseButton;
    private javax.swing.JButton insertToDatabaseButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton resetClearRowButton;
    public javax.swing.JTable tableRowsToBeImported;
    // End of variables declaration//GEN-END:variables
}
