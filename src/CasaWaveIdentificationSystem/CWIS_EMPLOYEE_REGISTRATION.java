package CasaWaveIdentificationSystem;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

/**
 * @author Khian Orland Juan
 */
public final class CWIS_EMPLOYEE_REGISTRATION extends javax.swing.JFrame {

    /**
     * Creates new form CWIS_EMPLOYEE_REGISTRATION
     */
    public static JLabel confirmLabelText;
    public static JPanel confirmPanel;
    String image_path = null;

    public CWIS_EMPLOYEE_REGISTRATION() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("HMS_LOGO_800PX.png")));
        initComponents();
        topBannerPanel.invalidate();
        topBannerPanel.validate();
        topBannerPanel.repaint();

        // create a button group for Gender
        ButtonGroup genderButtonGroup = new ButtonGroup();
        genderButtonGroup.add(maleButton);
        genderButtonGroup.add(femaleButton);

        Date dateNow = new Date();
        System.out.println(dateNow);

        showDate();
        showTime();

    }

    void showDate() {
        Date date = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        dateLabel.setText(simpleDateFormat.format(date));
    }

    void showTime() {
        new Timer(0, (ActionEvent e) -> {
            Date date = new Date();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("hh:mm:ss a");
            timeLabel.setText(simpleDateFormat.format(date));
        }).start();
    }

    // limit phone number max
    public class JTextFieldLimit extends PlainDocument {

        private final int limit;

        JTextFieldLimit(int limit) {
            super();
            this.limit = limit;
        }

        @Override
        public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
            if (str == null) {
                return;
            }

            if ((getLength() + str.length()) <= limit) {
                super.insertString(offset, str, attr);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        topBannerPanel = new javax.swing.JPanel();
        employeeRagistrationImageLabel = new javax.swing.JLabel();
        employeeFirstNameTf = new javax.swing.JTextField();
        employeeMiddleInitialTf = new javax.swing.JTextField();
        employeeLastNameTf = new javax.swing.JTextField();
        fullNameLabel = new javax.swing.JLabel();
        employeeHomeAddressTA_ = new javax.swing.JScrollPane();
        employeeHomeAddressTA = new javax.swing.JTextArea();
        homeAddressLabel = new javax.swing.JLabel();
        employeePhoneNumberTf = new javax.swing.JTextField();
        nationalityTf = new javax.swing.JTextField();
        nationalityLabel = new javax.swing.JLabel();
        religionChoice = new java.awt.Choice();
        religionLabel = new javax.swing.JLabel();
        dateOfBirthLabel = new javax.swing.JLabel();
        sexLabel = new javax.swing.JLabel();
        maleButton = new javax.swing.JRadioButton();
        femaleButton = new javax.swing.JRadioButton();
        bloodTypeLabel = new javax.swing.JLabel();
        bloodTypeChoice = new java.awt.Choice();
        civilStatusChoice = new java.awt.Choice();
        civilStatusLabel = new javax.swing.JLabel();
        employeePhoneNumberLabel = new javax.swing.JLabel();
        fatherEmailAddressLabel = new javax.swing.JLabel();
        fatherEmailAddressTf = new javax.swing.JTextField();
        motherEmailAddressLabel = new javax.swing.JLabel();
        motherEmailAddressTf = new javax.swing.JTextField();
        employeeImagePathLabel = new javax.swing.JLabel();
        selectImageButton = new javax.swing.JButton();
        imagePathLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        registerButton = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        dateLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        birthdayPicker = new com.github.lgooddatepicker.components.DatePicker();
        resetAllFieldsButton = new javax.swing.JButton();
        onScreenKeyboardButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Register Employee");
        setBackground(new java.awt.Color(235, 241, 253));
        setMinimumSize(new java.awt.Dimension(1000, 629));
        setName("hmsEmployeeRegistrationFrame"); // NOI18N
        setUndecorated(true);

        topBannerPanel.setBackground(new java.awt.Color(235, 241, 253));
        topBannerPanel.setMaximumSize(new java.awt.Dimension(1000, 629));
        topBannerPanel.setMinimumSize(new java.awt.Dimension(1000, 629));
        topBannerPanel.setPreferredSize(new java.awt.Dimension(1000, 629));

        employeeRagistrationImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CasaWaveIdentificationSystem/APP_IMAGES/login_images/CWIS_TOPPANEL_EMPLOYEE_REGISTER.png"))); // NOI18N
        employeeRagistrationImageLabel.setBackground(new java.awt.Color(235, 241, 253));

        employeeFirstNameTf.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        employeeFirstNameTf.setText("First Name");
        employeeFirstNameTf.setBackground(new java.awt.Color(204, 204, 255));
        employeeFirstNameTf.setToolTipText("First name of the Employee");
        employeeFirstNameTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                employeeFirstNameTfFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                employeeFirstNameTfFocusLost(evt);
            }
        });
        employeeFirstNameTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employeeFirstNameTfKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                employeeFirstNameTfKeyTyped(evt);
            }
        });

        employeeMiddleInitialTf.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        employeeMiddleInitialTf.setText("Middle Initial / Middle Name");
        employeeMiddleInitialTf.setBackground(new java.awt.Color(204, 204, 255));
        employeeMiddleInitialTf.setToolTipText("Middle Initial or Complete Middle Name");
        employeeMiddleInitialTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                employeeMiddleInitialTfFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                employeeMiddleInitialTfFocusLost(evt);
            }
        });
        employeeMiddleInitialTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employeeMiddleInitialTfKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                employeeMiddleInitialTfKeyTyped(evt);
            }
        });

        employeeLastNameTf.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        employeeLastNameTf.setText("Last Name");
        employeeLastNameTf.setBackground(new java.awt.Color(204, 204, 255));
        employeeLastNameTf.setToolTipText("Complete Last Name");
        employeeLastNameTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                employeeLastNameTfFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                employeeLastNameTfFocusLost(evt);
            }
        });
        employeeLastNameTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employeeLastNameTfKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                employeeLastNameTfKeyTyped(evt);
            }
        });

        fullNameLabel.setText("Full Name:");
        fullNameLabel.setBackground(new java.awt.Color(255, 255, 255));
        fullNameLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        employeeHomeAddressTA.setColumns(20);
        employeeHomeAddressTA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        employeeHomeAddressTA.setLineWrap(true);
        employeeHomeAddressTA.setRows(5);
        employeeHomeAddressTA.setText("Complete Address of the Employee...");
        employeeHomeAddressTA.setWrapStyleWord(true);
        employeeHomeAddressTA.setBackground(new java.awt.Color(204, 204, 255));
        employeeHomeAddressTA.setToolTipText("Complete Address of the Employee...");
        employeeHomeAddressTA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                employeeHomeAddressTAFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                employeeHomeAddressTAFocusLost(evt);
            }
        });
        employeeHomeAddressTA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employeeHomeAddressTAKeyPressed(evt);
            }
        });
        employeeHomeAddressTA_.setViewportView(employeeHomeAddressTA);

        homeAddressLabel.setText("Home Address:");
        homeAddressLabel.setBackground(new java.awt.Color(255, 255, 255));
        homeAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        employeePhoneNumberTf.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        employeePhoneNumberTf.setBackground(new java.awt.Color(204, 204, 255));
        employeePhoneNumberTf.setToolTipText("Please indicate your Phone number starting at 09xxxxxxxx");
        employeePhoneNumberTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeePhoneNumberTfActionPerformed(evt);
            }
        });
        employeePhoneNumberTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employeePhoneNumberTfKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                employeePhoneNumberTfKeyTyped(evt);
            }
        });
        employeePhoneNumberTf.setDocument(new JTextFieldLimit(11));

        nationalityTf.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        nationalityTf.setBackground(new java.awt.Color(204, 204, 255));
        nationalityTf.setToolTipText("Please indicate your Nationality (ex. Filipino)");
        nationalityTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nationalityTfKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nationalityTfKeyTyped(evt);
            }
        });
        employeePhoneNumberTf.setDocument(new JTextFieldLimit(11));

        nationalityLabel.setText("Nationality:");
        nationalityLabel.setBackground(new java.awt.Color(255, 255, 255));
        nationalityLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        religionChoice.setBackground(new java.awt.Color(204, 204, 255));
        religionChoice.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        religionChoice.add("Unspecified");
        religionChoice.add("Catholic");
        religionChoice.add("Islam");
        religionChoice.add("Judaism");
        religionChoice.add("Hinduism");
        religionChoice.add("Buddhism");
        religionChoice.add("Iglesia ni Cristo");
        religionChoice.add("Non-Roman Catholic and Protestant");
        religionChoice.add("Aglipayan");
        religionChoice.add("Seventh-day Adventist");

        religionLabel.setText("Religion:");
        religionLabel.setBackground(new java.awt.Color(255, 255, 255));
        religionLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        dateOfBirthLabel.setText("Birthday:");
        dateOfBirthLabel.setBackground(new java.awt.Color(255, 255, 255));
        dateOfBirthLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        sexLabel.setText("Sex:");
        sexLabel.setBackground(new java.awt.Color(255, 255, 255));
        sexLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        maleButton.setSelected(true);
        maleButton.setText("Male");
        maleButton.setBackground(new java.awt.Color(235, 241, 253));
        maleButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        femaleButton.setText("Female");
        femaleButton.setBackground(new java.awt.Color(235, 241, 253));
        femaleButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        bloodTypeLabel.setText("Blood Type:");
        bloodTypeLabel.setBackground(new java.awt.Color(255, 255, 255));
        bloodTypeLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        bloodTypeChoice.setBackground(new java.awt.Color(204, 204, 255));
        bloodTypeChoice.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        bloodTypeChoice.add("Unspecified");
        bloodTypeChoice.add("A+");
        bloodTypeChoice.add("A-");
        bloodTypeChoice.add("B+");
        bloodTypeChoice.add("B-");
        bloodTypeChoice.add("AB+");
        bloodTypeChoice.add("AB-");
        bloodTypeChoice.add("O+");
        bloodTypeChoice.add("O-");

        civilStatusChoice.setBackground(new java.awt.Color(204, 204, 255));
        civilStatusChoice.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        civilStatusChoice.add("Unspecified");
        civilStatusChoice.add("Single");
        civilStatusChoice.add("Married");
        civilStatusChoice.add("Divorced");
        civilStatusChoice.add("Widowed");

        civilStatusLabel.setText("Civil Status:");
        civilStatusLabel.setBackground(new java.awt.Color(255, 255, 255));
        civilStatusLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        employeePhoneNumberLabel.setText("Phone Number (09xx):");
        employeePhoneNumberLabel.setBackground(new java.awt.Color(255, 255, 255));
        employeePhoneNumberLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        fatherEmailAddressLabel.setText("Father's Email Address :");
        fatherEmailAddressLabel.setBackground(new java.awt.Color(255, 255, 255));
        fatherEmailAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        fatherEmailAddressTf.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        fatherEmailAddressTf.setBackground(new java.awt.Color(204, 204, 255));
        fatherEmailAddressTf.setToolTipText("");
        fatherEmailAddressTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fatherEmailAddressTfKeyPressed(evt);
            }
        });

        motherEmailAddressLabel.setText("Mother's Email Address :");
        motherEmailAddressLabel.setBackground(new java.awt.Color(255, 255, 255));
        motherEmailAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        motherEmailAddressTf.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        motherEmailAddressTf.setBackground(new java.awt.Color(204, 204, 255));
        motherEmailAddressTf.setToolTipText("");
        motherEmailAddressTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                motherEmailAddressTfKeyPressed(evt);
            }
        });

        employeeImagePathLabel.setText("Employee Image:");
        employeeImagePathLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        selectImageButton.setText("Select Image");
        selectImageButton.setBackground(new java.awt.Color(255, 255, 255));
        selectImageButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        selectImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectImageButtonActionPerformed(evt);
            }
        });

        imagePathLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        imagePathLabel.setText("image path");
        imagePathLabel.setBackground(new java.awt.Color(235, 241, 253));
        imagePathLabel.setFont(new java.awt.Font("Sylfaen", 0, 11)); // NOI18N
        imagePathLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        cancelButton.setBackground(new java.awt.Color(255, 102, 102));
        cancelButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        cancelButton.setText("Cancel (Esc)");
        cancelButton.setBorderPainted(false);
        cancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        registerButton.setBackground(new java.awt.Color(153, 153, 255));
        registerButton.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        registerButton.setText("Register Employee Account");
        registerButton.setBorderPainted(false);
        registerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        bottomPanel.setBackground(new java.awt.Color(153, 153, 255));
        bottomPanel.setRequestFocusEnabled(false);

        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dateLabel.setText("Date");
        dateLabel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        dateLabel.setForeground(new java.awt.Color(255, 255, 255));
        dateLabel.setRequestFocusEnabled(false);

        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeLabel.setText("Time");
        timeLabel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(255, 255, 255));
        timeLabel.setRequestFocusEnabled(false);

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addContainerGap(704, Short.MAX_VALUE)
                .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        birthdayPicker.setBackground(new java.awt.Color(235, 241, 253));
        birthdayPicker.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        birthdayPicker.setMaximumSize(null);

        resetAllFieldsButton.setText("Reset all fields");
        resetAllFieldsButton.setBackground(new java.awt.Color(153, 153, 255));
        resetAllFieldsButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        resetAllFieldsButton.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        resetAllFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllFieldsButtonActionPerformed(evt);
            }
        });

        onScreenKeyboardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CasaWaveIdentificationSystem/APP_IMAGES/mainprogram/onScreenKeyboard.png"))); // NOI18N
        onScreenKeyboardButton.setText("On-screen Keyboard");
        onScreenKeyboardButton.setBackground(new java.awt.Color(216, 219, 249));
        onScreenKeyboardButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        onScreenKeyboardButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        onScreenKeyboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onScreenKeyboardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topBannerPanelLayout = new javax.swing.GroupLayout(topBannerPanel);
        topBannerPanel.setLayout(topBannerPanelLayout);
        topBannerPanelLayout.setHorizontalGroup(
            topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topBannerPanelLayout.createSequentialGroup()
                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topBannerPanelLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(fullNameLabel))
                    .addGroup(topBannerPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(homeAddressLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topBannerPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(dateOfBirthLabel)))
                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topBannerPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(employeeFirstNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(employeeMiddleInitialTf, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(employeeLastNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topBannerPanelLayout.createSequentialGroup()
                        .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(topBannerPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(birthdayPicker, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fatherEmailAddressLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(employeePhoneNumberLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topBannerPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(motherEmailAddressLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(employeeImagePathLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fatherEmailAddressTf, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(employeePhoneNumberTf, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(motherEmailAddressTf, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
            .addGroup(topBannerPanelLayout.createSequentialGroup()
                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeeRagistrationImageLabel)
                    .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(topBannerPanelLayout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(employeeHomeAddressTA_, javax.swing.GroupLayout.PREFERRED_SIZE, 842, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(topBannerPanelLayout.createSequentialGroup()
                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topBannerPanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(topBannerPanelLayout.createSequentialGroup()
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(nationalityLabel)
                                    .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(civilStatusLabel)
                                            .addComponent(bloodTypeLabel))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topBannerPanelLayout.createSequentialGroup()
                                            .addGap(25, 25, 25)
                                            .addComponent(religionLabel))))
                                .addGap(18, 18, 18)
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nationalityTf)
                                    .addComponent(religionChoice, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                                    .addComponent(bloodTypeChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(civilStatusChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(topBannerPanelLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(onScreenKeyboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetAllFieldsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imagePathLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancelButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(registerButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(topBannerPanelLayout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(sexLabel)
                        .addGap(18, 18, 18)
                        .addComponent(maleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(femaleButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        topBannerPanelLayout.setVerticalGroup(
            topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topBannerPanelLayout.createSequentialGroup()
                .addComponent(employeeRagistrationImageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeFirstNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeMiddleInitialTf, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeLastNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fullNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(employeeHomeAddressTA_, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(homeAddressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(femaleButton)
                    .addComponent(sexLabel))
                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topBannerPanelLayout.createSequentialGroup()
                        .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(topBannerPanelLayout.createSequentialGroup()
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(dateOfBirthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(birthdayPicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nationalityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nationalityTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(religionChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(religionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(9, 9, 9)
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bloodTypeLabel)
                                    .addComponent(bloodTypeChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(civilStatusLabel)
                                    .addComponent(civilStatusChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(topBannerPanelLayout.createSequentialGroup()
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(employeePhoneNumberTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(employeePhoneNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fatherEmailAddressTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fatherEmailAddressLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(motherEmailAddressTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(topBannerPanelLayout.createSequentialGroup()
                                        .addComponent(motherEmailAddressLabel)
                                        .addGap(18, 18, 18)
                                        .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(employeeImagePathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(selectImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(imagePathLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(topBannerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resetAllFieldsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onScreenKeyboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(topBannerPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19)
                .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(topBannerPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void nationalityTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nationalityTfKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            CWIS_ADMINFORM showAdminForm = new CWIS_ADMINFORM();
            showAdminForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_nationalityTfKeyPressed

    private void employeePhoneNumberTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeePhoneNumberTfKeyTyped
        // allow only numbers
        if (!Character.isDigit(evt.getKeyChar())) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_employeePhoneNumberTfKeyTyped

    private void employeePhoneNumberTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeePhoneNumberTfKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            CWIS_ADMINFORM showAdminForm = new CWIS_ADMINFORM();
            showAdminForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_employeePhoneNumberTfKeyPressed

    private void employeeHomeAddressTAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeHomeAddressTAKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            CWIS_ADMINFORM showAdminForm = new CWIS_ADMINFORM();
            showAdminForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_employeeHomeAddressTAKeyPressed

    private void employeeHomeAddressTAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeHomeAddressTAFocusLost
        if (employeeHomeAddressTA.getText().trim().equals("")) // placeholder
        {
            employeeHomeAddressTA.setText("Complete Address of the Employee...");
            employeeHomeAddressTA.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_employeeHomeAddressTAFocusLost

    private void employeeHomeAddressTAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeHomeAddressTAFocusGained
        if (employeeHomeAddressTA.getText().trim().equals("Complete Address of the Employee...")
                || (employeeHomeAddressTA.getText().trim().equals(""))) {
            employeeHomeAddressTA.setText("");
            employeeHomeAddressTA.setForeground(Color.black);
        }
    }//GEN-LAST:event_employeeHomeAddressTAFocusGained

    private void employeeFirstNameTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeFirstNameTfKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            CWIS_ADMINFORM showAdminForm = new CWIS_ADMINFORM();
            showAdminForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_employeeFirstNameTfKeyPressed

    private void employeeFirstNameTfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeFirstNameTfFocusLost
        if (employeeFirstNameTf.getText().trim().equals("")) // placeholder
        {
            employeeFirstNameTf.setText("First Name");
            employeeFirstNameTf.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_employeeFirstNameTfFocusLost

    private void employeeFirstNameTfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeFirstNameTfFocusGained
        if (employeeFirstNameTf.getText().trim().equals("First Name")
                || (employeeFirstNameTf.getText().trim().equals(""))) {
            employeeFirstNameTf.setText("");
            employeeFirstNameTf.setForeground(Color.black);
        }
    }//GEN-LAST:event_employeeFirstNameTfFocusGained

    private void employeeMiddleInitialTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeMiddleInitialTfKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            CWIS_ADMINFORM showAdminForm = new CWIS_ADMINFORM();
            showAdminForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_employeeMiddleInitialTfKeyPressed

    private void employeeMiddleInitialTfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeMiddleInitialTfFocusLost
        if (employeeMiddleInitialTf.getText().trim().equals("")) // placeholder
        {
            employeeMiddleInitialTf.setText("Middle Initial / Middle Name");
            employeeMiddleInitialTf.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_employeeMiddleInitialTfFocusLost

    private void employeeMiddleInitialTfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeMiddleInitialTfFocusGained
        if (employeeMiddleInitialTf.getText().trim().equals("Middle Initial / Middle Name")) {
            employeeMiddleInitialTf.setText("");
            employeeMiddleInitialTf.setForeground(Color.black);
        }
    }//GEN-LAST:event_employeeMiddleInitialTfFocusGained

    private void employeeLastNameTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeLastNameTfKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            CWIS_ADMINFORM showAdminForm = new CWIS_ADMINFORM();
            showAdminForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_employeeLastNameTfKeyPressed

    private void employeeLastNameTfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeLastNameTfFocusLost
        if (employeeLastNameTf.getText().trim().equals("")) // placeholder
        {
            employeeLastNameTf.setText("Last Name");
            employeeLastNameTf.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_employeeLastNameTfFocusLost

    private void employeeLastNameTfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeLastNameTfFocusGained
        if (employeeLastNameTf.getText().trim().equals("")
                || (employeeLastNameTf.getText().trim().equals("Last Name"))) {
            employeeLastNameTf.setText("");
            employeeLastNameTf.setForeground(Color.black);
        }
    }//GEN-LAST:event_employeeLastNameTfFocusGained

    private void fatherEmailAddressTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fatherEmailAddressTfKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            CWIS_ADMINFORM showAdminForm = new CWIS_ADMINFORM();
            showAdminForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_fatherEmailAddressTfKeyPressed

    private void motherEmailAddressTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_motherEmailAddressTfKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            CWIS_ADMINFORM showAdminForm = new CWIS_ADMINFORM();
            showAdminForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_motherEmailAddressTfKeyPressed

    private void selectImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectImageButtonActionPerformed
        // select an image and set the image path into a JLabel
        String path = null;

        JFileChooser chooser = new JFileChooser();

        chooser.setCurrentDirectory(new File(System.getProperty("user.home")));

        // File extension
        FileNameExtensionFilter extension = new FileNameExtensionFilter("*Images", "jpg", "png", "jpeg");
        chooser.addChoosableFileFilter(extension);

        int filestate = chooser.showSaveDialog(null);

        // Check if the user select an image
        if (filestate == JFileChooser.APPROVE_OPTION) {
            File selectedImage = chooser.getSelectedFile();
            path = selectedImage.getAbsolutePath();
            imagePathLabel.setText(path);
            image_path = path;
        }
    }//GEN-LAST:event_selectImageButtonActionPerformed
    CWIS_EMPLOYEE_LIST employeeListForm = new CWIS_EMPLOYEE_LIST();
    String username = "root";
    String password = "root";
    ResultSet rs;
    PreparedStatement pst;


    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed

        confirmPanel = new JPanel();
        confirmLabelText = new JLabel("Do you want to register the account?"
                + " :: SOME FORMS CANNOT BE CHANGED AFTER THIS.");
        confirmPanel.add(confirmLabelText);
        String[] options = new String[]{"BACK", "CONFIRM"};
        int option = JOptionPane.showOptionDialog(null, confirmPanel, "Confirm?",
                JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, options, options[1]); // default selection
        if (option == 1) // pressing CONFIRM button
        {
            try {
                String firstNameString = employeeFirstNameTf.getText();
                String middleNameString = employeeMiddleInitialTf.getText();
                String lastNameString = employeeLastNameTf.getText();
                String homeAddressString = employeeHomeAddressTA.getText();

                String selectedbDay = birthdayPicker.getDateStringOrEmptyString();

                String bloodTypeString = String.valueOf(bloodTypeChoice.getSelectedItem());
                String phoneString = employeePhoneNumberTf.getText();
                String civilStatusString = String.valueOf(civilStatusChoice.getSelectedItem());
                String religionString = String.valueOf(religionChoice.getSelectedItem());
                String nationalityString = nationalityTf.getText();
                String fatherEmailAddressString = fatherEmailAddressTf.getText();
                String motherEmailAddressString = motherEmailAddressTf.getText();

                String gender = "Male";

                //getting current date and time using Date class
                DateFormat getCurrentDateTimeFormat = new SimpleDateFormat("YYYY-MM-dd hh:mm:ss");
                Date dateObject = new Date();
                String getDateTimeCurrent = getCurrentDateTimeFormat.format(dateObject);

                if (femaleButton.isSelected()) {
                    gender = "Female";
                }

                if (verifyFields()) {

                    PreparedStatement ps;
                    String registerEmployeeQuery = "INSERT INTO employees (firstName, middleInitial, lastName, employeeAddress, employeeGender, dateOfBirth, employeeBloodType, cellphoneNumber, civilStatus, employeeReligion, employeeNationality, fatherEmailAddress, motherEmailAddress, dateAndTimeRegistered, picture) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                    try {

                        ps = CASAWAVE_IDENTIFICATION_SYSTEM_DATABASE.getConnection().prepareStatement(registerEmployeeQuery);
                        ps.setString(1, firstNameString);
                        ps.setString(2, middleNameString);
                        ps.setString(3, lastNameString);
                        ps.setString(4, homeAddressString);
                        ps.setString(5, gender);
                        ps.setString(6, selectedbDay);
                        ps.setString(7, bloodTypeString);
                        ps.setString(8, phoneString);
                        ps.setString(9, civilStatusString);
                        ps.setString(10, religionString);
                        ps.setString(11, nationalityString);
                        ps.setString(12, fatherEmailAddressString);
                        ps.setString(13, motherEmailAddressString);
                        ps.setString(14, getDateTimeCurrent);

                        try {
                            // Save the image as BLOB in the Database
                            if (image_path != null) {

                                InputStream image = new FileInputStream(new File(image_path));
                                ps.setBlob(15, image);
                            } else if (image_path == null) {
                                ps.setNull(15, java.sql.Types.NULL);
                                System.out.println("No image attached.");
                            } else {
                                ps.setNull(15, java.sql.Types.NULL);
                                System.out.println("No image attached.");
                            }
                            if (ps.executeUpdate() != 0) {
                                JOptionPane.showMessageDialog(null, "Employee Account has been created.");
                                employeeFirstNameTf.setText("First Name");
                                employeeMiddleInitialTf.setText("Middle Initial / Middle Name");
                                employeeLastNameTf.setText("Last Name");
                                employeeHomeAddressTA.setText("Complete Address of the Employee...");
                                birthdayPicker.setText("");
                                employeePhoneNumberTf.setText("");
                                nationalityTf.setText("");
                                fatherEmailAddressTf.setText("");
                                motherEmailAddressTf.setText("");
                                religionChoice.select("Unspecified");
                                bloodTypeChoice.select("Unspecified");
                                civilStatusChoice.select("Unspecified");
                                this.repaint();

                            } else {
                                JOptionPane.showMessageDialog(null, "Error: Check your Information.");
                            }
                            ps.setNull(15, java.sql.Types.NULL);
                        } catch (FileNotFoundException ex) {
                            System.out.println(ex);
                        }
                    } catch (SQLException ex) {
                        System.out.println(ex);
                    } // try-catch
                } // if-verifyField
            } catch (ParseException ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_registerButtonActionPerformed
    public boolean verifyFields() throws ParseException {
        String firstNameString = employeeFirstNameTf.getText();
        String middleNameString = employeeMiddleInitialTf.getText();
        String lastNameString = employeeLastNameTf.getText();
        String homeAddressString = employeeHomeAddressTA.getText();

        String selectedbDay = birthdayPicker.getText();

        String bloodTypeString = String.valueOf(bloodTypeChoice.getSelectedItem());
//        String phoneString = employeePhoneNumberTf.getText();
        String civilStatusString = String.valueOf(civilStatusChoice.getSelectedItem());
        String religionString = String.valueOf(religionChoice.getSelectedItem());
        String nationalityString = nationalityTf.getText();
//        String fatherEmailAddressString = fatherEmailAddressTf.getText();
//        String motherEmailAddressString = motherEmailAddressTf.getText();

        /*String x = JComboBox.getSelectedItem().toString();
          will convert any value weather it is Integer, Double, Long, Short into text on the other hand,
          String x = String.valueOf(JComboBox.getSelectedItem());
          will avoid null values, and convert the selected item from object to string */
        // Check empty fields
        if (firstNameString.trim().equals("") || middleNameString.trim().equals("")
                || lastNameString.trim().equals("") || homeAddressString.trim().equals("")
                || selectedbDay.trim().equals("") || nationalityString.trim().equals("")
                || religionString.trim().equals("") || bloodTypeString.trim().equals("") || civilStatusString.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "One or more fields are empty.\nPlease fill-up all forms.", "Empty fields", 2);
            this.repaint();

            return false;
        } // If everything is okay...
        else {
            return true;
        }
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        CWIS_ADMINFORM showAdminForm = new CWIS_ADMINFORM();
        showAdminForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void employeePhoneNumberTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeePhoneNumberTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeePhoneNumberTfActionPerformed

    private void resetAllFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllFieldsButtonActionPerformed
        employeeFirstNameTf.setText("First Name");
        employeeMiddleInitialTf.setText("Middle Initial / Middle Name");
        employeeLastNameTf.setText("Last Name");
        employeeHomeAddressTA.setText("Complete Address of the Employee...");
        birthdayPicker.setText("");
        employeePhoneNumberTf.setText("");
        nationalityTf.setText("");
        fatherEmailAddressTf.setText("");
        motherEmailAddressTf.setText("");
        religionChoice.select("Unspecified");
        bloodTypeChoice.select("Unspecified");
        civilStatusChoice.select("Unspecified");
        imagePathLabel.setText("image path");
        this.repaint();
    }//GEN-LAST:event_resetAllFieldsButtonActionPerformed

    private void onScreenKeyboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onScreenKeyboardButtonActionPerformed
        try {
            Runtime.getRuntime().exec("cmd /c osk");
        } catch (IOException err) {
            System.out.println(err);
        }
    }//GEN-LAST:event_onScreenKeyboardButtonActionPerformed

    private void employeeFirstNameTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeFirstNameTfKeyTyped
        char charInputOnly = evt.getKeyChar();
        if (!(Character.isAlphabetic(charInputOnly) || (charInputOnly == KeyEvent.VK_BACK_SPACE) || charInputOnly == KeyEvent.VK_DELETE || charInputOnly == KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_employeeFirstNameTfKeyTyped

    private void employeeMiddleInitialTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeMiddleInitialTfKeyTyped
        char charInputOnly = evt.getKeyChar();
        if (!(Character.isAlphabetic(charInputOnly) || (charInputOnly == KeyEvent.VK_BACK_SPACE) || charInputOnly == KeyEvent.VK_DELETE || charInputOnly == KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_employeeMiddleInitialTfKeyTyped

    private void employeeLastNameTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeLastNameTfKeyTyped
        char charInputOnly = evt.getKeyChar();
        if (!(Character.isAlphabetic(charInputOnly) || (charInputOnly == KeyEvent.VK_BACK_SPACE) || charInputOnly == KeyEvent.VK_DELETE || charInputOnly == KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_employeeLastNameTfKeyTyped

    private void nationalityTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nationalityTfKeyTyped
        char charInputOnly = evt.getKeyChar();
        if (!(Character.isAlphabetic(charInputOnly) || (charInputOnly == KeyEvent.VK_BACK_SPACE) || charInputOnly == KeyEvent.VK_DELETE || charInputOnly == KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_nationalityTfKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException
                | InstantiationException
                | IllegalAccessException
                | UnsupportedLookAndFeelException e) {
            System.out.println(e);
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CWIS_EMPLOYEE_REGISTRATION().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DatePicker birthdayPicker;
    private java.awt.Choice bloodTypeChoice;
    public javax.swing.JLabel bloodTypeLabel;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton cancelButton;
    private java.awt.Choice civilStatusChoice;
    public javax.swing.JLabel civilStatusLabel;
    private javax.swing.JLabel dateLabel;
    public javax.swing.JLabel dateOfBirthLabel;
    private javax.swing.JTextField employeeFirstNameTf;
    private javax.swing.JTextArea employeeHomeAddressTA;
    private javax.swing.JScrollPane employeeHomeAddressTA_;
    private javax.swing.JLabel employeeImagePathLabel;
    private javax.swing.JTextField employeeLastNameTf;
    private javax.swing.JTextField employeeMiddleInitialTf;
    public javax.swing.JLabel employeePhoneNumberLabel;
    private javax.swing.JTextField employeePhoneNumberTf;
    private javax.swing.JLabel employeeRagistrationImageLabel;
    public javax.swing.JLabel fatherEmailAddressLabel;
    private javax.swing.JTextField fatherEmailAddressTf;
    private javax.swing.JRadioButton femaleButton;
    private javax.swing.Box.Filler filler1;
    public javax.swing.JLabel fullNameLabel;
    public javax.swing.JLabel homeAddressLabel;
    private javax.swing.JLabel imagePathLabel;
    private javax.swing.JRadioButton maleButton;
    public javax.swing.JLabel motherEmailAddressLabel;
    private javax.swing.JTextField motherEmailAddressTf;
    public javax.swing.JLabel nationalityLabel;
    private javax.swing.JTextField nationalityTf;
    private javax.swing.JButton onScreenKeyboardButton;
    private javax.swing.JButton registerButton;
    private java.awt.Choice religionChoice;
    public javax.swing.JLabel religionLabel;
    private javax.swing.JButton resetAllFieldsButton;
    private javax.swing.JButton selectImageButton;
    public javax.swing.JLabel sexLabel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JPanel topBannerPanel;
    // End of variables declaration//GEN-END:variables

}
